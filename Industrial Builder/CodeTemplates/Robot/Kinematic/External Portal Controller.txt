//
// Robot Model Controller
//

import SceneKit
import IndustrialKit

let socket_path = "/tmp/<#Name#>_robot_controller_socket"

var performed = true

// Remove old socket if exists
unlink(socket_path)

// Create socket
let server_socket = socket(AF_UNIX, SOCK_STREAM, 0)
guard server_socket >= 0 else
{
    fatalError("Failed to create socket")
}

// Setup socket address
var addr = sockaddr_un()
addr.sun_family = sa_family_t(AF_UNIX)

let path_cstring = socket_path.utf8CString
withUnsafeMutableBytes(of: &addr.sun_path)
{ buffer in
    for (i, c) in path_cstring.enumerated()
    {
        buffer[i] = UInt8(bitPattern: c)
    }
}

let addr_size = socklen_t(MemoryLayout.size(ofValue: addr))

withUnsafePointer(to: &addr)
{
    $0.withMemoryRebound(to: sockaddr.self, capacity: 1)
    { ptr in
        if bind(server_socket, ptr, addr_size) != 0
        {
            fatalError("Failed to bind socket")
        }
    }
}

if listen(server_socket, 5) != 0
{
    fatalError("Failed to listen on socket")
}

print("Robot controller server started on \(socket_path)")

// MARK: - Accept Loop
while performed
{
    var client_addr = sockaddr()
    var client_addr_len = socklen_t(MemoryLayout<sockaddr>.size)
    let client_socket = accept(server_socket, &client_addr, &client_addr_len)
    
    guard client_socket >= 0 else
    {
        print("Failed to accept connection")
        continue
    }
    
    var buffer = [UInt8](repeating: 0, count: 2048)
    let bytes_read = read(client_socket, &buffer, buffer.count)
    
    if bytes_read > 0
    {
        if let command = String(bytes: buffer.prefix(bytes_read), encoding: .utf8)?
            .trimmingCharacters(in: .whitespacesAndNewlines)
        {
            let parts = command.split(separator: " ").map(String.init)
            let input = parts.dropFirst()
            var output = ""
            
            switch parts.first
            {
            case "update_nodes_positions":
                output = update_nodes_positions(
                    pointer_location: [Float(input[1]) ?? 0,
                                       Float(input[2]) ?? 0,
                                       Float(input[3]) ?? 0],
                    pointer_rotation: [Float(input[4]) ?? 0,
                                       Float(input[5]) ?? 0,
                                       Float(input[6]) ?? 0],
                    origin_location:  [Float(input[7]) ?? 0,
                                       Float(input[8]) ?? 0,
                                       Float(input[9]) ?? 0],
                    origin_rotation:  [Float(input[10]) ?? 0,
                                       Float(input[11]) ?? 0,
                                       Float(input[12]) ?? 0])
            case "reset_model":
                output = reset_nodes()
                
            case "initial_charts_data":
                output = initial_charts_data().json_string()
            case "updated_charts_data":
                output = updated_charts_data().json_string()
            case "initial_charts_data":
                output = initial_charts_data().json_string()
            case "initial_states_data":
                output = initial_states_data().json_string()
                
            case "stop":
                output = "Component stopped"
                performed = false
            default:
                output = "Unknown command"
            }
            
            let result = output + "\n"
            _ = result.utf8.withContiguousStorageIfAvailable {
                write(client_socket, $0.baseAddress!, $0.count)
            }
        }
    }
    
    close(client_socket)
}

// MARK: - Performing
func update_nodes_positions(pointer_location: [Float], pointer_rotation: [Float], origin_location: [Float], origin_rotation: [Float]) -> String
{
    var output_string = ""
    
    let values = inverse_kinematic_calculation(pointer_location: pointer_location, pointer_rotation: pointer_rotation, origin_location:  origin_location, origin_rotation:  origin_rotation)
    
    output_string += "d0 setLocation(\(values[1]), 0, 0)\n"
    output_string += "d2 setLocation(0, \(values[2]), 0)\n"
    output_string += "d1 setLocation(0, 0, \(values[0]))\n"
    
    return output_string
}

func inverse_kinematic_calculation(pointer_location: [Float], pointer_rotation: [Float], origin_location: [Float], origin_rotation: [Float]) -> [Float]
{
    let lengths: [Float] = [
        <#lengths#>
    ]
    
    var px, py, pz: Float
    
    px = pointer_location[0] + origin_location[0] - lengths[1]
    py = pointer_location[1] + origin_location[1] - lengths[2]
    pz = pointer_location[2] + origin_location[2] - lengths[0] + lengths[3] + lengths[4]
    
    // Checking X part limit
    if px < 0
    {
        px = 0
    }
    else
    {
        if px > lengths[5]
        {
            px = lengths[5]
        }
    }
    
    // Checking Y part limit
    if py < 0
    {
        py = 0
    }
    else
    {
        if py > lengths[6] - lengths[2] / 2
        {
            py = lengths[6] - lengths[2] / 2
        }
    }
    
    // Checking Z part limit
    if pz > 0
    {
        pz = 0
    }
    else
    {
        if pz < -lengths[7]
        {
            pz = -lengths[7]
        }
    }

    return [px, py, pz]
}

// MARK: - Statistics
func reset_nodes() -> String
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return String()@*/return String()/*@END_MENU_TOKEN@*/
}

func initial_charts_data() -> [WorkspaceObjectChart]?
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return [WorkspaceObjectChart]()@*/return [WorkspaceObjectChart]()/*@END_MENU_TOKEN@*/
}

func updated_charts_data() -> [WorkspaceObjectChart]?
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return [WorkspaceObjectChart]()@*/return [WorkspaceObjectChart]()/*@END_MENU_TOKEN@*/
}

func initial_states_data() -> [StateItem]?
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return [StateItem]()@*/return [StateItem]()/*@END_MENU_TOKEN@*/
}

func updated_states_data() -> [StateItem]?
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return [StateItem]()@*/return [StateItem]()/*@END_MENU_TOKEN@*/
}
