//
// Robot Model Controller
//

import Darwin
import SceneKit
import IndustrialKit

@MainActor
struct RobotModelController
{
    static func main()
    {
        guard CommandLine.arguments.count > 0 else { exit(1) }

        let input: [String] = CommandLine.arguments.dropFirst().compactMap { String($0) }

        var output = String()

        switch input.first // Function Name
        {
        case "update_nodes_positions":
            output = update_nodes_positions(pointer_location: [Float(input[1]) ?? 0, Float(input[2]) ?? 0, Float(input[3]) ?? 0], pointer_rotation: [Float(input[4]) ?? 0, Float(input[5]) ?? 0, Float(input[6]) ?? 0], origin_location: [Float(input[7]) ?? 0, Float(input[8]) ?? 0, Float(input[9]) ?? 0], origin_rotation: [Float(input[10]) ?? 0, Float(input[11]) ?? 0, Float(input[12]) ?? 0])
        case "reset_model":
            output = reset_nodes()

        case "updated_charts_data":
            output = updated_charts_data().json_string()
        case "updated_states_data":
            output = updated_states_data().json_string()
        case "initial_charts_data":
            output = initial_charts_data().json_string()
        case "initial_states_data":
            output = updated_states_data().json_string()

        default:
            break
        }

        print(output, terminator: "")
    }
    
    //MARK: - Performing
    static func update_nodes_positions(pointer_location: [Float], pointer_rotation: [Float], origin_location: [Float], origin_rotation: [Float]) -> String
    {
        /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return String()@*/return String()/*@END_MENU_TOKEN@*/
    }

    //MARK: - Statistics
    static func reset_nodes() -> String
    {
        /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return String()@*/return String()/*@END_MENU_TOKEN@*/
    }

    static func initial_charts_data() -> [WorkspaceObjectChart]?
    {
        /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return [WorkspaceObjectChart]()@*/return [WorkspaceObjectChart]()/*@END_MENU_TOKEN@*/
    }

    static func updated_charts_data() -> [WorkspaceObjectChart]?
    {
        /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return [WorkspaceObjectChart]()@*/return [WorkspaceObjectChart]()/*@END_MENU_TOKEN@*/
    }

    static func initial_states_data() -> [StateItem]?
    {
        /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return [StateItem]()@*/return [StateItem]()/*@END_MENU_TOKEN@*/
    }

    static func updated_states_data() -> [StateItem]?
    {
        /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return [StateItem]()@*/return [StateItem]()/*@END_MENU_TOKEN@*/
    }
}
