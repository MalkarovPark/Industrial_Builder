//
// Tool Connector
//

import SceneKit
import IndustrialKit

let socket_path = "/tmp/<#Name#>_tool_connector_socket"

var performed = true

// Remove old socket if exists
unlink(socket_path)

// Create socket
let server_socket = socket(AF_UNIX, SOCK_STREAM, 0)
guard server_socket >= 0 else
{
    fatalError("Failed to create socket")
}

// Setup socket address
var addr = sockaddr_un()
addr.sun_family = sa_family_t(AF_UNIX)

let path_cstring = socket_path.utf8CString
withUnsafeMutableBytes(of: &addr.sun_path)
{ buffer in
    for (i, c) in path_cstring.enumerated()
    {
        buffer[i] = UInt8(bitPattern: c)
    }
}

let addr_size = socklen_t(MemoryLayout.size(ofValue: addr))

withUnsafePointer(to: &addr)
{
    $0.withMemoryRebound(to: sockaddr.self, capacity: 1)
    { ptr in
        if bind(server_socket, ptr, addr_size) != 0
        {
            fatalError("Failed to bind socket")
        }
    }
}

if listen(server_socket, 5) != 0
{
    fatalError("Failed to listen on socket")
}

print("Tool connector server started on \(socket_path)")

// MARK: - Accept Loop
while performed
{
    var client_addr = sockaddr()
    var client_addr_len = socklen_t(MemoryLayout<sockaddr>.size)
    let client_socket = accept(server_socket, &client_addr, &client_addr_len)
    
    guard client_socket >= 0 else
    {
        print("Failed to accept connection")
        continue
    }
    
    var no_sig_pipe: Int32 = 1
    setsockopt(client_socket, SOL_SOCKET, SO_NOSIGPIPE, &no_sig_pipe, socklen_t(MemoryLayout.size(ofValue: no_sig_pipe)))
    var buffer = [UInt8](repeating: 0, count: 1024 * 1024)
    let bytes_read = read(client_socket, &buffer, buffer.count)
    
    if bytes_read > 0
    {
        if let command = String(bytes: buffer.prefix(bytes_read), encoding: .utf8)?
            .trimmingCharacters(in: .whitespacesAndNewlines)
        {
            let parts = command.split(separator: " ").map(String.init)
            let input = parts.dropFirst()
            var output = ""
            
            switch parts.first
            {
            case "connect":
                output = connect(parameters: Array(input))
            case "disconnect":
                output = disconnect()

            case "perform":
                output = perform(code: Int(input[0]) ?? 0)
            case "reset_device":
                output = reset_device()
                
            case "info_output":
                output = info_output()
                
            case "updated_charts_data":
                output = updated_charts_data().json_string()
            case "updated_states_data":
                output = updated_states_data().json_string()
            case "initial_charts_data":
                output = initial_charts_data().json_string()
            case "initial_states_data":
                output = initial_states_data().json_string()

            case "sync_model":
                output = sync_model()
                
            case "stop":
                output = "Component stopped"
                performed = false
            default:
                output = "Unknown command"
            }
            
            let result = output + "\n"
            let data = result.data(using: .utf8)!

            data.withUnsafeBytes
            { buffer in
                var total_sent = 0
                while total_sent < buffer.count
                {
                    let sent = write(client_socket, buffer.baseAddress!.advanced(by: total_sent), buffer.count - total_sent)
                    if sent <= 0
                    {
                        break
                    }
                    total_sent += sent
                }
            }
        }
    }
    
    close(client_socket)
}

// MARK: - Connection
func connect(parameters: [String]) -> String
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return String()@*/return String()/*@END_MENU_TOKEN@*/
}

func disconnect() -> String
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return String()@*/return String()/*@END_MENU_TOKEN@*/
}

// MARK: - Info
func info_output() -> String
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return String()@*/return String()/*@END_MENU_TOKEN@*/
}

// MARK: - Performing
func perform(code: Int) -> String
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return String()@*/return String()/*@END_MENU_TOKEN@*/
}

func reset_device() -> String
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return String()@*/return String()/*@END_MENU_TOKEN@*/
}

// MARK: - Statistics
func initial_charts_data() -> [WorkspaceObjectChart]?
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return [WorkspaceObjectChart]()@*/return [WorkspaceObjectChart]()/*@END_MENU_TOKEN@*/
}

func updated_charts_data() -> [WorkspaceObjectChart]?
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return [WorkspaceObjectChart]()@*/return [WorkspaceObjectChart]()/*@END_MENU_TOKEN@*/
}

func initial_states_data() -> [StateItem]?
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return [StateItem]()@*/return [StateItem]()/*@END_MENU_TOKEN@*/
}

func updated_states_data() -> [StateItem]?
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return [StateItem]()@*/return [StateItem]()/*@END_MENU_TOKEN@*/
}

// MARK: - Modeling
func sync_model() -> String
{
    /*@START_MENU_TOKEN@*//*@PLACEHOLDER=return String()@*/return String()/*@END_MENU_TOKEN@*/
}
